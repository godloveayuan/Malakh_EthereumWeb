<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ethereum.dao.ContractInfoDao">

    <resultMap id="ContractInfoMap" type="ContractInfo">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="type" column="type"/>
        <result property="owner" column="owner"/>
        <result property="ownerName" column="owner_name"/>
        <result property="address" column="address"/>
        <result property="status" column="status"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

    <sql id="selectField">
        id ,
        name,
        type,
        owner,
        address,
        status,
        create_time,
        update_time
    </sql>

    <sql id="insertColumn">
        <trim suffixOverrides=",">
            <if test="name!=null">name,</if>
            <if test="type!=null">type,</if>
            <if test="owner!=null">owner,</if>
            <if test="address!=null">address,</if>
            <if test="status!=null">status,</if>
            <if test="createTime!=null">create_time,</if>
            <if test="updateTime!=null">update_time,</if>
        </trim>
    </sql>
    <sql id="insertValue">
        <trim suffixOverrides=",">
            <if test="name!=null">#{name},</if>
            <if test="type!=null">#{type},</if>
            <if test="owner!=null">#{owner},</if>
            <if test="address!=null">#{address},</if>
            <if test="status!=null">#{status},</if>
            <if test="createTime!=null">#{createTime},</if>
            <if test="updateTime!=null">#{updateTime},</if>
        </trim>
    </sql>

    <insert id="insert" parameterType="ContractInfo">
        INSERT INTO contract_info
        (<include refid="insertColumn"/>)
        values
        (<include refid="insertValue"/>)
    </insert>

    <select id="selectAll" resultMap="ContractInfoMap">
        SELECT contract.*,
        device.device_name as owner_name
        FROM contract_info as contract
        LEFT JOIN device_info as device ON contract.owner=device.device_uid
        <where>
            <if test="status !=null and ( status==0 or status==1 )">
                status=#{status}
            </if>
        </where>
        order by contract.id desc
    </select>

    <select id="selectFilter" parameterType="ContractInfo" resultMap="ContractInfoMap">
        SELECT contract.*,
        device.device_name as owner_name
        FROM contract_info as contract
        LEFT JOIN device_info as device ON contract.owner=device.device_uid
        <where>
            <trim suffixOverrides="and">
                <if test="name!=null">contract.name like ${name} and</if>
                <if test="owner!=null">contract.owner like ${owner} and</if>
                <if test="owner!=null">device.device_name like ${ownerName} and</if>
                <if test="address!=null">contract.address like ${address} and</if>
                <if test="id!=null">contract.id=#{id} and</if>
                <if test="type!=null">contract.type = #{type} and</if>
                <if test="status!=null">contract.status=#{status} and</if>
            </trim>
        </where>
        order by contract.id desc
    </select>

    <select id="selectById" resultMap="ContractInfoMap">
        SELECT contract.*,
        device.device_name as owner_name
        FROM contract_info as contract
        LEFT JOIN device_info as device ON contract.owner=device.device_uid
        where contract.id=#{id}
    </select>

    <select id="selectByName" resultMap="ContractInfoMap">
        SELECT contract.*,
        device.device_name as owner_name
        FROM contract_info as contract
        LEFT JOIN device_info as device ON contract.owner=device.device_uid
        where contract.name=#{name}
    </select>

    <select id="selectByAddress" resultMap="ContractInfoMap">
        SELECT contract.*,
        device.device_name as owner_name
        FROM contract_info as contract
        LEFT JOIN device_info as device ON contract.owner=device.device_uid
        where contract.address=#{address}
    </select>

    <update id="update" parameterType="ContractInfo">
        UPDATE contract_info
        SET
        <trim suffixOverrides=",">
            <if test="name!=null">name=#{name},</if>
            <if test="type!=null">type=#{type},</if>
            <if test="owner!=null">owner=#{owner},</if>
            <if test="address!=null">address=#{address},</if>
            <if test="status!=null">status=#{status},</if>
        </trim>
        WHERE id=#{id}
    </update>

    <delete id="delete" parameterType="int">
        DELETE FROM
        contract_info
        WHERE id=#{id}
    </delete>

    <select id="selectPublicContract" resultMap="ContractInfoMap">
        SELECT contract.*,
        device.device_name as owner_name
        FROM contract_info as contract
        LEFT JOIN device_info as device ON contract.owner=device.device_uid
        where contract.status=1 and contract.type='public'
    </select>

    <select id="selectPrivateContract" resultMap="ContractInfoMap">
        SELECT contract.*,
        device.device_name as owner_name
        FROM contract_info as contract
        LEFT JOIN device_info as device ON contract.owner=device.device_uid
        where contract.status=1 and contract.type='private' and contract.owner=#{deviceUid}
    </select>

</mapper>